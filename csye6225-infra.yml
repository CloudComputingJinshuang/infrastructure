Description:
  This template deploys a VPC, with a pair of public and private subnets spread
  across two Availability Zones. It deploys an internet gateway, with a default
  route on the public subnets.

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: 'aws-default-env'

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.10.0/24


  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.192.20.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.192.21.0/24

  PrivateSubnet3CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.192.22.0/24
  
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    Default: csye_ec2

  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro

  AMIid:
    Description: ami id for building instance
    Type: String
    Default: 'ami-05281de3127209ba7'
  
  DatabaseType:
    Type: String
    Default: 'MySQL'
  
  EngineVersion:
    Type: String
    Default: '8.0.28'
  
  BucketName:
    Description: Name of an existing S3 bucket
    Type: String
    Default: 'dev.csye6225jinshuang.me'
  
  AWSProfileKeyID:
    Type: String
    Default: 'AKIAWSGWMIDYQOL66HRG'

  AWSProfileSecretKey:
    Type: String
    Default: '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'

  AWSProfileRegion:
    Type: String
    Default: 'us-west-2'
    
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    Default: csye_ec2
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro

  AMIid:
    Description: ami id for building instance
    Type: String
    Default: 'ami-0837589bd4b2dcb00'

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: !Ref PrivateSubnet3CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ3)

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet3

  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: 'no-ingress-sg'
      GroupDescription: 'Security group with no ingress rule'
      VpcId: !Ref VPC
      
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable SSH access via port 22 and http access
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: '0.0.0.0/0'
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: '0.0.0.0/0'
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: '0.0.0.0/0'
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: '0.0.0.0/0'
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      SecurityGroupIds: 
        - !Ref InstanceSecurityGroup
      KeyName: !Ref KeyName
      ImageId: !Ref AMIid
      SubnetId: !Ref PublicSubnet1
      DisableApiTermination: true
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: '20'
            DeleteOnTermination: 'false'
            Encrypted: 'true'
      UserData:
        Fn::Base64:
          !Sub |
          #!/bin/bash

          echo "spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5InnoDBDialect" >> /tmp/jdbc.properties
          echo "spring.jpa.hibernate.ddl-auto = update" >> /tmp/jdbc.properties

          echo "aws.access_key_id = AKIAWSGWMIDYQOL66HRG" >> /tmp/jdbc.properties
          echo "aws.secret_access_key= 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" >> /tmp/jdbc.properties
          echo "aws.s3.region= us-west-2" >> /tmp/jdbc.properties
          echo "aws.s3.bucket= ${S3Bucket}" >> /tmp/jdbc.properties


          crontab -l | { cat; echo "@reboot (cd /tmp && java -jar demo1-0.0.1-SNAPSHOT.jar --spring.config.location=file:///tmp/jdbc.properties)"; } | crontab -
          cd /tmp
          java -jar demo1-0.0.1-SNAPSHOT.jar --spring.config.location=file:///tmp/jdbc.properties

  RDSDBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: "Subnet group"
      DBSubnetGroupName: "PrivateSubnets"
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3

  DBinstance: 
    Type: AWS::RDS::DBInstance
    Properties: 
      DBInstanceIdentifier: "csye6225"
      DBName: "csye6225"
      VPCSecurityGroups: 
        - 
          Ref: "DbSecurityByEC2SecurityGroup"
      AllocatedStorage: "20"
      DBInstanceClass: "db.t3.small"
      Engine: !Ref DatabaseType
      EngineVersion: !Ref EngineVersion
      MasterUsername: "csye6225"
      MasterUserPassword: "Njs862459063!"
      PubliclyAccessible: "false"
      DBSubnetGroupName: !Ref RDSDBSubnetGroup
      MultiAZ: 'false'
      DBParameterGroupName: !Ref DBParameterGroup
  
  DBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Family: MySQL8.0
      Description: Cloud formation DatabaseType
      

  DbSecurityByEC2SecurityGroup: 
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: "database"
      GroupDescription: "Ingress for Amazon EC2 security group"
      VpcId: !Ref VPC
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !GetAtt InstanceSecurityGroup.GroupId
  
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        !Sub
          - '${RandomGUID}.${BucketName}'
          - { RandomGUID: !Select [0, !Split ["-", !Select [2, !Split ["/", !Ref AWS::StackId ]]]] }
      BucketEncryption: 
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              # KMSMasterKeyID: !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}'
              SSEAlgorithm: 'aws:kms'
        
      LifecycleConfiguration:
        Rules:
          - Id: GlacierRule
            Prefix: files 
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
            ExpirationInDays: 365
  IAMPolicy: 
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: CFNUsers
      PolicyDocument:
        Version: "2012-10-17"

        Statement:
          - Effect: Allow
            Action:
              - 's3:DeleteObjectTagging'
              - 's3:PutObject'
              - 's3:GetObject'
              - 's3:ListBucketMultipartUploads'
              - 's3:DeleteObjectVersion'
              - 's3:ListBucketVersions'
              - 's3:PutObjectVersionTagging'
              - 's3:ListBucket'
              - 's3:PutObjectTagging'
              - 's3:DeleteObject'
              - 's3:GetObjectVersion'
              - 's3:ListMultipartUploadParts'
            Resource: 
              - !Sub arn:aws:s3:::${S3Bucket}
              - !Sub arn:aws:s3:::${S3Bucket}*
      Roles:
        - !Ref IAMRole
              
  IAMRole: 
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      RoleName: "EC2-CSYE6225"
